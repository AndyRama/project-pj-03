generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String     @id @default(nanoid(11))
  name             String?
  email            String     @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  stripeCustomerId String?
  plan             UserPlan   @default(FREE)
  resendContactId  String?
  passwordHash     String?
  accounts         Account[]
  feedbacks        Feedback[]
  sessions         Session[]
}

model Reservation {
  id                String    @id @default(cuid())
  uid               String    @unique
  title             String
  date              DateTime  // Correspond Ã  startTime
  clientName        String
  status            String    @default("ACCEPTED")
  videoCallUrl      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Index pour optimiser les recherches
  @@index([date])
  @@index([status])
}

model Feedback {
  id        String   @id @default(nanoid(11))
  review    Int
  message   String
  email     String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model AlimentaireProfile {
  id        String    @id @default(nanoid(11))
  firstName String
  lastName  String
  size      Int
  age       Int
  weight    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

enum UserPlan {
  FREE
  PREMIUM
}
